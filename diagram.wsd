@startuml Adventure

class Room{
    + NAME : String
    + DESCRIPTION : String
    - exits : List<Map<String, Exit>>
    - npcs : List<NPC>
    - chests : List<Chest>
    - items : List<Item>

    + Room(String, String) 
}

class Map{
    + {static}MAP : Map
    - curr : int
    
    - Map()
    + init() : void
}

class Exit{
    + ROOM : Room
    
    + Exit(Room)
}

class OneWayExit{

    + OneWayExit(Room, Room)
    + go(int, int) : void
}

abstract class Item{
    + VOLUME : int
    + NAME : String

    + Item(int, String)
    + {abstract}use() : void
}

abstract class Equipment{
    - att : int
    - def : int
    - lvl : int
    + NAME : String

    + Equipment(String, int, int)
    + {abstract}upgrade() : void 
}

class Backpack{
    + VOLUME : int
    - items : List<Item>

    + Backpack()
    + remove(Item) : void
}

class Hero{
    - hp : int
    - gold : int
    - keys : List<Key>
    - equipment : Equipment[]
    + BACKPACK : List<Item>

    + Hero()
    + use(String) : void
    + take(Item) : void
    + drop(Item) : void
    + attack(NPC) : void
}

abstract class NPC{
    + HP : int
    + ATT : int
    + DEF : int
    + DESCRIPTION : String
    - key : Key
    - gold : int

    + NPC()
    + NPC(int)
    + NPC(Key) 
    + {abstract}attack() : void
}

class Pot{

    + Pot(int)
    + attack() : void
}

class Orc{
     
    + Orc() 
    + attack() : void
}

class Troll{
    
    + Troll(int, Key)
    + attack() : void
    + talk() : void
    + give(int) : void
}

class Merchant{
    - items : List
    - prices : List

    + Merchant(List<Integer>, List<Item>)
    + attack() : void
    + talk() : void
}

class OldMan{

    + OldMan(Key)
    + riddle() : void
    + solve(int) : void
}

Hero *--> Equipment
Hero *--> Backpack
Room *--> Exit
Map *--> Room
Exit --> OneWayExit

@enduml